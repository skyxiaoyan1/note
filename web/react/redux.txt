a 什么是Redux它为什么存在
一个面向JavaScript应用的可预测状态容器。
“如果React已经在为我的应用管理前端状态，为何还需要Redux？”
使用Redux的主要优势之一是它可以帮你处理应用的共享状态。如果两个组件需要访问同一状态，该怎么办？这种两个组件同时需要访问同一状态的现象称为“共享状态”。你可以将该状态提升到附近的父组件，但是如果该父组件在组件树中向上好几个组件的位置，那么将状态当做属性向下一个一个地传递，这项工作很快就会变得乏味。此外，在该父组件和该子组件之间的组件甚至根本不需要访问该状态！
-->只需告诉Redux到底哪个组件需要哪个数据，它就会为你处理后续一切工作！

Store：单一数据源
Redux的基本原则之一是存在单一数据源：Store。也就是说，Store包括应用的全局状态，全存储在一个对象树中。
Redux是一个JavaScript库，用于管理应用的前端状态。Redux并非React应用的必须条件，但是随着网络应用的复杂性越来越高，状态管理不当可能会导致bug。Redux应用中的全局状态存储在单一数据源store中。因为状态的更新受到严格控制，使得Redux非常具有可预测性。实际上，开发人员喜欢Redux的主要原因之一就是它的可预测性。我们来看看背后的原因！
=================
b Redux如何改变可预测性

数据被合并到一个集中的位置：store。组件不能直接修改store中的数据;相反，他们必须请求访问这些数据。
--->你总是知道状态来自哪里（store），以及允许哪一个唯一实体触发更新（action）到该状态。
它提供了一个严格的单向数据流

单向数据流概述
====================================
c Redux Store和组件状态
Redux Store
redux 是一个强大的网络应用  888状态容器888
通常，如果状态是共享的，并且可在整个应用中访问，则应存储在store中
例如登陆状态。
组件状态
另一方面，如果涉及的是更加“本地”的数据，或者处理的状态不影响其他组件，则更适合使用组件的状态

Redux状态是只读的
更改state的唯一方式是派发相应的action
Redux对何时及如何更新状态制定了严格的限制条件。其中一个限制条件是只有纯函数可以更新Redux应用中的状态

===============================================
d 纯函数
纯函数是 Redux 应用中，更新状态的必要手段。纯函数的定义是:

1 对于同一参数，返回同一结果 完全取决于传入的参数
2 不会产生副作用 ，不影响其他组建。

================================================
数组的Reduce()方法
.reduce()的核心概念是传入大量数据，但只返回一个值


