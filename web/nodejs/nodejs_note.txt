本笔记用来学习notejs
学习参考https://www.runoob.com/nodejs/nodejs-tutorial.html
总领
Node.js 就是运行在服务端的 JavaScript。
使用版本 模式。
$ node -v
v4.4.3
第一个node.js
console.log("Hello World"); 
保存为helloworld.js
用node命令运行
node helloworld.js
同时 这个node自带了交换模式
输入node即可和输入linux命令shell一样
=========================================
1 安装。
Node.js 安装包及源码下载地址为：https://nodejs.org/en/download/。 

Linux 上安装 Node.js
# wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz    // 下载
# tar xf  node-v10.9.0-linux-x64.tar.xz       // 解压
# cd node-v10.9.0-linux-x64/                  // 进入解压目录
# ./bin/node -v                               // 执行node命令 查看版本
v10.9.0

ln -s /usr/software/nodejs/bin/npm   /usr/local/bin/ 
ln -s /usr/software/nodejs/bin/node   /usr/local/bin/

安装 可以使用的时候处理，不做记录

 在 Cloud Studio 中运行 node.js 程序
这个主要是远程的主机， 在腾讯的云里
step1：访问腾讯云开发者平台(https://studio.dev.tencent.com/)，注册/登录账户。
step2：在右侧的运行环境菜单选择："Node.js" 运行环境
step3：在左侧代码目录中新建Node.js代码目录编写你的 Node.js 代码
======================================================
2 创建第一个应用
node.js应用的组成 
a引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。
b创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。
c接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。

实际操作
a 引入require指令来 载入http 模块
var http = require("http");
b 创建服务器
使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。 函数通过 request, response 参数来接收和响应数据。
及
创建一个叫 server.js 的文件
var http = require('http');

http.createServer(function (request, response) {

    // 发送 HTTP 头部 
    // HTTP 状态值: 200 : OK
    // 内容类型: text/plain
    response.writeHead(200, {'Content-Type': 'text/plain'});

    // 发送响应数据 "Hello World"
    response.end('Hello World\n');
}).listen(8888);

// 终端打印如下信息
console.log('Server running at http://127.0.0.1:8888/');
==》
以上代码我们完成了一个可以工作的 HTTP 服务器。
使用 node 命令执行以上的代码：
node server.js
Server running at http://127.0.0.1:8888/
接下来，打开浏览器访问 http://127.0.0.1:8888/，你会看到一个写着 "Hello World"的网页。 

=================================================
3 npm 的使用介绍
NPM是随同NodeJS一起安装的包管理工具
新版的nodejs已经集成了npm，所以之前npm也一并安装好了
$ npm -v
2.3.0
sudo npm install npm -g  //升级
使用淘宝镜像的命令： cnpm install npm -g

a 使用 npm 命令安装模块
npm install <Module Name>
以下实例，我们使用 npm 命令安装常用的 Node.js web框架模块 express:
$ npm install express

 安装好之后，express 包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require('express') 的方式就好，无需指定第三方包路径。

var express = require('express');

b 全局安装与本地安装
 npm 的包安装分为本地安装（local）、全局安装（global）两种，从敲的命令行来看，差别只是有没有-g而已，比如

npm install express          # 本地安装
npm install express -g   # 全局安装

本地安装

    1. 将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。
    2. 可以通过 require() 来引入本地安装的包。 

全局安装

    1. 将安装包放在 /usr/local 下或者你 node 的安装目录。
    2. 可以直接在命令行里使用。

查看安装信息
npm list -g
npm list grunt //grunt参考版本号
卸载模块
$ npm uninstall express
看是否卸载好了
$ npm ls
更新模块
$ npm update express
搜索模块
$ npm search express
创建模块
创建模块，package.json 文件是必不可少的。我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果
 npm init
在 npm 资源库中注册用户（使用邮箱注册）：
$ npm adduser
Username: mcmohd
Password:
Email: (this IS public) mcmohd@gmail.com

发布$ npm publish

===============================================================
4 交换解释器
Node.js REPL(交互式解释器)  输入 node 进入
Node 自带了交互式解释器， 就是终端形式的输入和得到结果的运行和编及环境。
下划线(_)变量 为上一个动作的结果。
> x + y
30
> var sum = _
undefined
> console.log(sum)
30

常用命令
ctrl + c - 退出当前终端。

ctrl + c 按下两次 - 退出 Node REPL。

ctrl + d - 退出 Node REPL.

向上/向下 键 - 查看输入的历史命令

tab 键 - 列出当前命令

.help - 列出使用命令

.break - 退出多行表达式

.clear - 退出多行表达式

.save filename - 保存当前的 Node REPL 会话到指定文件

.load filename - 载入当前 Node REPL 会话的文件内容

=======================================================

5 Node.js 回调函数
Node.js 异步编程的直接体现就是回调。
异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。
Node 所有 API 都支持回调函数,回调函数一般作为函数的最后一个参数出现。

var fs = require("fs");

fs.readFile('input.txt', function (err, data) {
    if (err) return console.error(err);
    console.log(data.toString());
});

console.log("程序执行结束!");

===========================================================

6 Node.js 事件循环
Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。
Node.js 几乎每一个 API 都是支持回调函数的。

Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。

Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.

a 事件驱动程序
Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。 
当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。

// 引入 events 模块
var events = require('events');
// 创建 eventEmitter 对象
var eventEmitter = new events.EventEmitter();

// 创建事件处理程序
var connectHandler = function connected() {
   console.log('连接成功。');
  
   // 触发 data_received 事件 
   eventEmitter.emit('data_received');
}

// 绑定 connection 事件处理程序
eventEmitter.on('connection', connectHandler);
 
// 使用匿名函数绑定 data_received 事件
eventEmitter.on('data_received', function(){
   console.log('数据接收成功。');
});

// 触发 connection 事件 
eventEmitter.emit('connection');

console.log("程序执行完毕。");


==================================================
6 Node.js EventEmitter
EventEmitter   如上章节用法。
大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。


====================================
7 Node.js Buffer(缓冲区)
JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。
处理像TCP流或文件流时，必须使用到二进制数据。
。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。
一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。
a Buffer 与字符编码
通过使用显式的字符编码，就可以在 Buffer 实例与普通的 JavaScript 字符串之间进行相互转换。
const buf = Buffer.from('runoob', 'ascii');

// 输出 72756e6f6f62
console.log(buf.toString('hex'));

// 输出 cnVub29i
console.log(buf.toString('base64'));

创建 Buffer 类

    Buffer.alloc(size[, fill[, encoding]])： 返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0
    Buffer.allocUnsafe(size)： 返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据
    Buffer.allocUnsafeSlow(size)
    Buffer.from(array)： 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）
    Buffer.from(arrayBuffer[, byteOffset[, length]])： 返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。
    Buffer.from(buffer)： 复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例
    Buffer.from(string[, encoding])： 返回一个被 string 的值初始化的新的 Buffer 实例


写入缓冲区
buf.write(string[, offset[, length]][, encoding])
buf = Buffer.alloc(256);
len = buf.write("www.runoob.com");

console.log("写入字节数 : "+  len);

从缓冲区读取数据
buf.toString([encoding[, start[, end]]])
例如
console.log( buf.toString('ascii'));       // 输出: abcdefghijklmnopqrstuvwxyz
console.log( buf.toString('ascii',0,5));   // 输出: abcde
console.log( buf.toString('utf8',0,5));    // 输出: abcde
console.log( buf.toString(undefined,0,5)); // 使用 'utf8' 编码, 并输出: abcde

将 Buffer 转换为 JSON 对象
buf.toJSON()
=====================================================
Node.js Stream(流)  
 Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。
里面有对事件机制的继承。
从流中读取数据
var fs = require("fs");
var data = '';

// 创建可读流
var readerStream = fs.createReadStream('input.txt');

// 设置编码为 utf8。
readerStream.setEncoding('UTF8');

// 处理流事件 --> data, end, and error
readerStream.on('data', function(chunk) {
   data += chunk;
});

readerStream.on('end',function(){
   console.log(data);
});

readerStream.on('error', function(err){
   console.log(err.stack);
});

console.log("程序执行完毕");

写入流
var fs = require("fs");
var data = '菜鸟教程官网地址：www.runoob.com';

// 创建一个可以写入的流，写入到文件 output.txt 中
var writerStream = fs.createWriteStream('output.txt');

// 使用 utf8 编码写入数据
writerStream.write(data,'UTF8');

// 标记文件末尾
writerStream.end();

// 处理流事件 --> data, end, and error
writerStream.on('finish', function() {
    console.log("写入完成。");
});

writerStream.on('error', function(err){
   console.log(err.stack);
});

console.log("程序执行完毕");

管道流
管道提供了一个输出流到输入流的机制
var fs = require("fs");

// 创建一个可读流
var readerStream = fs.createReadStream('input.txt');

// 创建一个可写流
var writerStream = fs.createWriteStream('output.txt');

// 管道读写操作
// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中
readerStream.pipe(writerStream);

console.log("程序执行完毕");

链式流
链式是通过连接输出流到另外一个流并创建多个流操作链的机制
var fs = require("fs");
var zlib = require('zlib');

// 压缩 input.txt 文件为 input.txt.gz
fs.createReadStream('input.txt')
  .pipe(zlib.createGzip())
  .pipe(fs.createWriteStream('input.txt.gz'));
  
console.log("文件压缩完成。");

就是多个管道套接起来用。

================================================
Node.js模块系统
 为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。 
文件和模块是一一对应的。
模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。


    exports 和 module.exports 的使用

    如果要对外暴露属性或方法，就用 exports 就行，要暴露对象(类似class，包含了很多属性和方法)，就用 module.exports。

var hello = require('./hello');
hello.world();


在 hellonote.js 中
exports.world = function() {
  console.log('Hello World');
}

=========================================================
Node.js 函数
和js的一样。
===============================================================
Node.js 路由
提供URL 和 其他的GET POST 参数  -》 路由，路由根据这个些参数--》运用相应代码。

 我们需要的所有数据都会包含在 request 对象中，该对象作为 onRequest() 回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的 Node.JS 模块，它们分别是 url 和 querystring 模块。 

a 现在我们来给 onRequest() 函数加上一些逻辑，用来找出浏览器请求的 URL 路径： 



===========================================================
Node.js 全局对象
JavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量
也就是： 有个 全局对象global， 他的属性也是全局的， 属性叫全局变量。

全局对象与全局变量
global 最根本的作用是作为全局变量的宿主
在node.js  中你不可能在最外层定义变量、
因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。


__filename
 __filename 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径。
__dirname
 __dirname 表示当前执行脚本所在的目录。
setTimeout(cb, ms)
 setTimeout(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：

clearTimeout(t)
clearTimeout( t ) 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的定时器。

setInterval(cb, ms)
 setInterval(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。

console 方法

process
 process 是一个全局变量，即 global 对象的属性。
它用于描述当前Node.js 进程状态的对象，提供了一个与操作系统的简单接口

=========================================================
Node.js 常用工具
 util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。 

=======================================================
Node.js 文件系统
 Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：
var fs = require("fs")

异步和同步
Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本

其实就是操作文件的api 不是什么文件系统

===========================================================
Node.js GET/POST请求 
获取GET请求内容
 由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。 
 node.js 中 url 模块中的 parse 函数提供了这个功能。
    res.end(util.inspect(url.parse(req.url, true)));

获取 URL 的参数
我们可以使用 url.parse 方法来解析 URL 中的参数，代码如下：
    var params = url.parse(req.url, true).query;

获取 POST 请求内容

=================================================================
Node.js 工具模块
1	OS 模块
提供基本的系统操作函数。
2	Path 模块
提供了处理和转换文件路径的工具。
3	Net 模块
用于底层的网络通信。提供了服务端和客户端的的操作。
4	DNS 模块
用于解析域名。
5	Domain 模块
简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的。

=========================================================
Node.js Web 模块
web服务器一般指网站服务器
目前最主流的三个Web服务器是Apache、Nginx、IIS。

Web 应用架构
client（手机电脑的浏览器）-----server（web server）-----business layer(业务逻辑)----------data layer（数据层数据库）

使用 Node 创建 Web 服务器
 Node.js 提供了 http 模块，http 模块主要用于搭建 HTTP 服务端和客户端，使用 HTTP 服务器或客户端功能必须调用 http 模块，代码如下：

var http = require('http');



var http = require('http');
var fs = require('fs');
var url = require('url');
 
 
// 创建服务器
http.createServer( function (request, response) {  
   // 解析请求，包括文件名
   var pathname = url.parse(request.url).pathname;
   
   // 输出请求的文件名
   console.log("Request for " + pathname + " received.");
   
   // 从文件系统中读取请求的文件内容
   fs.readFile(pathname.substr(1), function (err, data) {
      if (err) {
         console.log(err);
         // HTTP 状态码: 404 : NOT FOUND
         // Content Type: text/html
         response.writeHead(404, {'Content-Type': 'text/html'});
      }else{             
         // HTTP 状态码: 200 : OK
         // Content Type: text/html
         response.writeHead(200, {'Content-Type': 'text/html'});    
         
         // 响应文件内容
         response.write(data.toString());        
      }
      //  发送响应数据
      response.end();
   });   
}).listen(8080);
 
// 控制台会输出以下信息
console.log('Server running at http://127.0.0.1:8080/'


 index.html 

<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>菜鸟教程(runoob.com)</title>
</head>
<body>
    <h1>我的第一个标题</h1>
    <p>我的第一个段落。</p>
</body>
</html>


使用 Node 创建 Web 客户端

=========================================================
Node.js Express 框架
Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。

使用 Express 可以快速地搭建一个完整功能的网站。
安装 Express
$ cnpm install express --save

以下几个重要的模块是需要与 express 框架一起安装的：


    body-parser - node.js 中间件，用于处理 JSON, Raw, Text 和 URL 编码的数据。

    cookie-parser - 这就是一个解析Cookie的工具。通过req.cookies可以取到传过来的cookie，并把它们转成对象。

    multer - node.js 中间件，用于处理 enctype="multipart/form-data"（设置表单的MIME编码）的表单数据。

$ cnpm install body-parser --save
$ cnpm install cookie-parser --save
$ cnpm install multer --save


第一个 Express 框架实例
接下来我们使用 Express 框架来输出 "Hello World"。


//express_demo.js 文件
var express = require('express');
var app = express();
 
app.get('/', function (req, res) {
   res.send('Hello World');
})
 
var server = app.listen(8081, function () {
 
  var host = server.address().address
  var port = server.address().port
 
  console.log("应用实例，访问地址为 http://%s:%s", host, port)
 
})



请求和响应
Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。 

app.get('/', function (req, res) {
   // --
})

路由
 
//  主页输出 "Hello World"
app.get('/', function (req, res) {
   console.log("主页 GET 请求");
   res.send('Hello GET');
})
 
 
//  POST 请求
app.post('/', function (req, res) {
   console.log("主页 POST 请求");
   res.send('Hello POST');
})
 
//  /del_user 页面响应
app.get('/del_user', function (req, res) {
   console.log("/del_user 响应 DELETE 请求");
   res.send('删除页面');
})
 
//  /list_user 页面 GET 请求
app.get('/list_user', function (req, res) {
   console.log("/list_user GET 请求");
   res.send('用户列表页面');
})
 
就是通过 get post方法来多加入几个

静态文件
 Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。

app.use('/public', express.static('public'));

我们可以到 public/images 目录下放些图片,如下所示：

node_modules
server.js
public/
public/images
public/images/logo.png

在浏览器中访问 http://127.0.0.1:8081/public/images/logo.png

GET 方法
POST 方法

Cookie 管理、
var cookieParser = require('cookie-parser')

==========================================================
Node.js RESTful API
REST即表述性状态传递（英文：Representational State Transfer，简称REST）是Roy Fielding博士在2000年他的博士论文中提出来的一种软件架构风格。

架构风格

============================================================
Node.js 多进程

Node 提供了 child_process 模块来创建子进程，方法有：

    exec - child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。

    spawn - child_process.spawn 使用指定的命令行参数创建新进程。

    fork - child_process.fork 是 spawn()的特殊形式，用于在子进程中运行的模块，如 fork('./son.js') 相当于 spawn('node', ['./son.js']) 。与spawn方法不同的是，fork会在父进程与子进程之间，建立一个通信管道，用于进程之间的通信。


====================================================
Node.js JXcore 打包
Node.js 是一个开放源代码、跨平台的、用于服务器端和网络应用的运行环境。
JXcore 是一个支持多线程的 Node.js 发行版本，基本不需要对你现有的代码做任何改动就可以直接线程安全地以多线程运行。

========================================================
Node.js 连接 MySQL
安装驱动
$ cnpm install mysql
连接数据库
ar mysql      = require('mysql');
var connection = mysql.createConnection({
  host     : 'localhost',
  user     : 'root',
  password : '123456',
  database : 'test'
});
 
connection.connect();
 
connection.query('SELECT 1 + 1 AS solution', function (error, results, fields) {
  if (error) throw error;
  console.log('The solution is: ', results[0].solution);
});

数据库操作( CURD )
查询数据
插入数据
更新数据
删除数据

=====================================
Node.js 连接 MongoDB
MongoDB是一种文档导向数据库管理系统，由C++撰写而成。
$ cnpm install mongodb
同 sql一样 不同的数据库
