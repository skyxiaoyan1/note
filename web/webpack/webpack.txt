webpack 入门。
参考https://www.runoob.com/w3cnote/webpack-tutorial.html
webpack 是前端 加载/打包工具。
根据 模块的依赖关系---》，进行静态分析，---》 生存静态资源。

资源 js、css、less 转换成一个静态文件。
减少了页面的请求。

安装 Webpack

cnpm install webpack -g
首先要有nodejs  已经由于速度慢  采用淘宝的cnpm。

创建项目

mkdir app
在 app 目录下添加 runoob1.js 文件，代码如下：
document.write("It works.");


在 app 目录下添加 index.html 文件，代码如下：

<html>
    <head>
        <meta charset="utf-8">
    </head>
    <body>
        <script type="text/javascript" src="bundle.js" charset="utf-8"></script>
    </body>
</html>

接下来我们使用 webpack 命令来打包：

webpack runoob1.js bundle.js
生成bundle.js 文件

在浏览器中打开 index.html

创建第二个 JS 文件
接下来我们创建另外一个 js 文件 runoob2.js，代码如下所示：

module.exports = "It works from runoob2.js.";

更新 runoob1.js 文件，代码如下：

document.write(require("./runoob2.js"));
接下来我们使用 webpack 命令来打包：
webpack runoob1.js bundle.js

webpack 根据模块的依赖关系进行静态分析，这些文件(模块)会被包含到 bundle.js 文件中。
Webpack 会给每个模块分配一个唯一的 id 并通过这个 id 索引和访问模块。 在页面启动时，会先执行 runoob1.js 中的代码，其它模块会在运行 require 的时候再执行。

LOADER
Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。
如果我们需要在应用中添加 css 文件  
使用到 css-loader(会遍历 CSS 文件，然后找到 url() 表达式然后处理他们) 和 style-loader(把原来的 CSS 代码插入页面中的一个 style 标签中)，

令来安装 css-loader 和 style-loader(全局安装需要参数 -g)。

cnpm install css-loader style-loader
 执行以上命令后，会再当前目录生成 node_modules 目录，它就是 css-loader 和 style-loader 的安装目录。

接下来创建一个 style.css 文件，代码如下：

body {
    background: yellow;
}

修改 runoob1.js 文件，代码如下：
require("!style-loader!css-loader!./style.css");
document.write(require("./runoob2.js"));

打包
webpack runoob1.js bundle.js

运行 index.html

注意
require CSS 文件的时候都要写 loader 前缀 !style-loader!css-loader!

也可以根据模块类型（扩展名）来自动绑定需要的 loader。----将 runoob1.js 中的 require("!style-loader!css-loader!./style.css") 修改为 require("./style.css") ：
不过打包的时候要指定要用的webpack load
webpack runoob1.js bundle.js --module-bind 'css=style-loader!css-loader'


配置文件
我们可以将一些编译选项放在配置文件中，以便于统一管理：
创建 webpack.config.js 文件，代码如下所示：

module.exports = {
    entry: "./runoob1.js",
    output: {
        path: __dirname,
        filename: "bundle.js"
    },
    module: {
        loaders: [
            { test: /\.css$/, loader: "style-loader!css-loader" }
        ]
    }
};


接下来我们只需要执行 webpack 命令即可生成 bundle.js 文件：

插件
插件在 webpack 的配置信息 plugins 选项中指定，用于完成一些 loader 不能完成的工。
webpack 自带一些插件，你可以通过 cnpm 安装一些插件。
内置插件安装：
cnpm install webpack --save-dev
比如我们可以安装内置的 BannerPlugin 插件，用于在文件头部输出一些注释信息。

比如我们可以安装内置的 BannerPlugin 插件，用于在文件头部输出一些注释信息。
修改 webpack.config.js，代码如下：


var webpack=require('webpack');
 
module.exports = {
    entry: "./runoob1.js",
    output: {
        path: __dirname,
        filename: "bundle.js"
    },
    module: {
        loaders: [
            { test: /\.css$/, loader: "style-loader!css-loader" }
        ]
    },
    plugins:[
    new webpack.BannerPlugin('菜鸟教程 webpack 实例')
    ]
};
webpack
打开 bundle.js，可以看到文件头部出现了我们指定的注释信息。

开发环境
当项目逐渐变大，webpack 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色。

webpack --progress --colors

每次修改模块后都重新编译---启动监听模式--没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的。

webpack --progress --colors --watch

使用 webpack-dev-server 开发服务
 localhost:8080 启动一个 express 静态资源 web 服务器 会监听模式自动运行 webpack，在浏览器打开 http://localhost:8080/ 或 http://localhost:8080/webpack-dev-server/ 可以浏览项目中的页面和编译后的资源输出，并且通过一个 socket.io 服务实时监听它们的变化并自动刷新页面。

# 安装
cnpm install webpack-dev-server -g
 
# 运行
webpack-dev-server --progress --colors



